/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

USE ORDERS;
-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]

SELECT 
   UPPER(CONCAT(
        CASE
            WHEN CUSTOMER_GENDER='F' THEN 'MS'
            WHEN CUSTOMER_GENDER='M' THEN 'MR'
        END,
        '.',CUSTOMER_FNAME, ' ',CUSTOMER_LNAME)) AS FULL_NAME,
    CUSTOMER_EMAIL,
    CUSTOMER_CREATION_DATE,
    CASE
        WHEN YEAR(CUSTOMER_CREATION_DATE)  <2005 THEN 'CATEGORY A'
        WHEN YEAR(CUSTOMER_CREATION_DATE)  >=2005 AND YEAR(CUSTOMER_CREATION_DATE) < 2011 THEN 'CATEGORY B'
        WHEN YEAR(CUSTOMER_CREATION_DATE)  >= 2011 THEN 'CATEGORY C'
	END AS CUSTOMER_CATEGORY
FROM ONLINE_CUSTOMER;

-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    
    

	SELECT PR.PRODUCT_ID,PR.PRODUCT_DESC,PR.PRODUCT_QUANTITY_AVAIL,PR.PRODUCT_PRICE,
    PR.PRODUCT_QUANTITY_AVAIL * PR.PRODUCT_PRICE AS INVENTORY_VALUE,
    CASE
    WHEN PR.PRODUCT_PRICE > 20000 THEN PR.PRODUCT_PRICE-(PR.PRODUCT_PRICE*0.20)
    WHEN PR.PRODUCT_PRICE > 10000  AND PR.PRODUCT_PRICE <= 20000 THEN PR.PRODUCT_PRICE-(PR.PRODUCT_PRICE*0.15)
    WHEN PR.PRODUCT_PRICE <=10000 THEN PR.PRODUCT_PRICE-(PR.PRODUCT_PRICE*0.10) 
    END AS NEW_PRICE
    FROM PRODUCT AS PR 
    LEFT JOIN ORDER_ITEMS AS OI
    USING (PRODUCT_ID)
    WHERE OI.ORDER_ID IS NULL
    ORDER BY INVENTORY_VALUE DESC;
    
    
    
    
-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
   

	SELECT PR.PRODUCT_CLASS_CODE,PC.PRODUCT_CLASS_DESC,COUNT(PC.PRODUCT_CLASS_CODE) AS NO_OF_PRODUCTS,
    SUM(PR.PRODUCT_QUANTITY_AVAIL * PR.PRODUCT_PRICE) AS INVENTORY_VALUE
    FROM PRODUCT AS PR
    LEFT JOIN PRODUCT_CLASS AS PC
    USING (PRODUCT_CLASS_CODE)
    GROUP BY  PR.PRODUCT_CLASS_CODE,PC.PRODUCT_CLASS_DESC
    HAVING INVENTORY_VALUE > 100000
    ORDER BY INVENTORY_VALUE DESC;


-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]


SELECT OH.CUSTOMER_ID,UPPER(CONCAT(OC.CUSTOMER_FNAME,' ',OC.CUSTOMER_LNAME)) AS FULL_NAME,OC.CUSTOMER_EMAIL,OC.CUSTOMER_PHONE,AD.COUNTRY
FROM ORDER_HEADER AS OH
LEFT JOIN ONLINE_CUSTOMER AS OC 
USING(CUSTOMER_ID)
LEFT JOIN ADDRESS AS AD
USING (ADDRESS_ID)
WHERE OH.CUSTOMER_ID IN (
SELECT CUSTOMER_ID
FROM ORDER_HEADER
WHERE ORDER_STATUS='CANCELLED')
GROUP BY OH.CUSTOMER_ID 
HAVING COUNT(DISTINCT OH.ORDER_STATUS) =1;



-- CHECKING

SELECT CUSTOMER_ID,ORDER_STATUS
FROM ORDER_HEADER
WHERE ORDER_STATUS='CANCELLED';

SELECT CUSTOMER_ID,ORDER_STATUS
FROM ORDER_HEADER
WHERE CUSTOMER_ID IN (8,33,51,34,41)
ORDER BY CUSTOMER_ID;


-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    

SELECT S.SHIPPER_NAME,AD.CITY,COUNT(DISTINCT(OH.CUSTOMER_ID)) AS NO_OF_CUSTOMERS,COUNT(OH.ORDER_ID) AS NO_OF_CONSIGNMENTS_DELIVERED
FROM SHIPPER AS S
LEFT JOIN ORDER_HEADER AS OH
USING (SHIPPER_ID)
LEFT JOIN ONLINE_CUSTOMER AS OC
USING (CUSTOMER_ID)
LEFT JOIN ADDRESS AS AD
USING (ADDRESS_ID)
WHERE S.SHIPPER_NAME='DHL'
GROUP BY S.SHIPPER_NAME,AD.CITY;





-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]
    

    SELECT OC.CUSTOMER_ID,CONCAT(OC.CUSTOMER_FNAME,' ',CUSTOMER_LNAME) AS FULL_NAME,SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY,
    SUM(OI.PRODUCT_QUANTITY*PR.PRODUCT_PRICE) AS TOTAL_VALUE
    FROM ONLINE_CUSTOMER AS OC
    LEFT JOIN ORDER_HEADER AS OH
    USING(CUSTOMER_ID)
    LEFT JOIN ORDER_ITEMS AS OI
    USING (ORDER_ID) 
    LEFT JOIN PRODUCT AS PR
    USING (PRODUCT_ID)
    WHERE OH.ORDER_STATUS='SHIPPED' 
       AND OH.PAYMENT_MODE ='CASH'
       AND OC.CUSTOMER_LNAME LIKE 'G%'
    GROUP BY OC.CUSTOMER_ID;
    
    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
    

SELECT OI.ORDER_ID,SUM(OI.PRODUCT_QUANTITY*PR.LEN*PR.WIDTH*PR.HEIGHT) AS VOLUME
FROM ORDER_ITEMS AS OI
LEFT JOIN PRODUCT AS PR
USING(PRODUCT_ID)
GROUP BY  OI.ORDER_ID 
HAVING VOLUME < 
(SELECT (LEN*WIDTH*HEIGHT) AS CARTON_VOLUME
FROM CARTON
WHERE CARTON_ID=10)
ORDER BY VOLUME DESC
LIMIT 1;



-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)



SELECT PR.PRODUCT_ID,PR.PRODUCT_DESC,SUM(PR.PRODUCT_QUANTITY_AVAIL) AS QUANTITY_AVAILABLE,COALESCE(SUM(OI.PRODUCT_QUANTITY),0) AS QUANTITY_SOLD,
CASE
    WHEN COALESCE(SUM(OI.PRODUCT_QUANTITY),0) =0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
    WHEN PC.PRODUCT_CLASS_DESC='ELECTRONICS' OR PC.PRODUCT_CLASS_DESC='COMPUTER' THEN 
        (CASE 
		    WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.10 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.50 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) >= 0.50 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0)THEN 'SUFFICIENT INVENTORY'
            END)
	 WHEN PC.PRODUCT_CLASS_DESC='MOBILES' OR PC.PRODUCT_CLASS_DESC='WATCHES' THEN 
         (CASE 
		    WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.20 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.60 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) >= 0.60 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0)THEN 'SUFFICIENT INVENTORY'
            END)
	 WHEN PC.PRODUCT_CLASS_DESC NOT IN ('ELECTRONICS','COMPUTER' ,'MOBILES','WATCHES') THEN
         (CASE 
		    WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.30 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) < 0.70 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
            WHEN SUM(PR.PRODUCT_QUANTITY_AVAIL) - COALESCE(SUM(OI.PRODUCT_QUANTITY),0) >= 0.70 * COALESCE(SUM(OI.PRODUCT_QUANTITY),0)THEN 'SUFFICIENT INVENTORY'
            END)
END AS INVENTORY_STATUS
FROM PRODUCT AS PR
LEFT JOIN PRODUCT_CLASS AS PC
USING (PRODUCT_CLASS_CODE)
LEFT JOIN ORDER_ITEMS AS OI
USING(PRODUCT_ID)
GROUP BY PR.PRODUCT_ID,PR.PRODUCT_DESC,PC.PRODUCT_CLASS_DESC;

    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    

    SELECT OI.PRODUCT_ID,PR.PRODUCT_DESC,SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
    FROM ORDER_ITEMS AS OI
    LEFT JOIN PRODUCT AS PR
    USING(PRODUCT_ID)
    LEFT JOIN ORDER_HEADER AS OH
    USING(ORDER_ID)
    LEFT JOIN ONLINE_CUSTOMER AS OC
    USING(CUSTOMER_ID)
    LEFT JOIN ADDRESS AS AD
    USING(ADDRESS_ID)
    WHERE OH.ORDER_STATUS='SHIPPED' 
    AND AD.CITY NOT IN ('BANGALORE','NEW DELHI')
    AND OI.ORDER_ID IN (
    SELECT ORDER_ID
    FROM ORDER_ITEMS
    WHERE PRODUCT_ID = 201)
    GROUP BY OI.PRODUCT_ID,PR.PRODUCT_DESC
    ORDER BY TOTAL_QUANTITY DESC;
    


-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVENAND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]

    
    SELECT OH.ORDER_ID,OH.CUSTOMER_ID,UPPER(CONCAT(OC.CUSTOMER_FNAME,' ',OC.CUSTOMER_LNAME)) AS FULL_NAME,
    SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
    FROM ORDER_HEADER AS OH
    LEFT JOIN ORDER_ITEMS AS OI
    USING(ORDER_ID)
    LEFT JOIN ONLINE_CUSTOMER AS OC
    USING(CUSTOMER_ID)
    LEFT JOIN ADDRESS AS AD
    USING (ADDRESS_ID)
    WHERE (OH.ORDER_ID % 2 =0) AND OH.ORDER_STATUS='SHIPPED' AND AD.PINCODE NOT LIKE '5%'
    GROUP BY OH.ORDER_ID,OH.CUSTOMER_ID;
    

    
